
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract Crowdfunding {
    address public owner;
    uint public goalAmount;
    uint public deadline;
    uint public totalRaised;

    mapping(address => uint) public contributions;

    constructor() {
        owner = msg.sender;
        goalAmount = 10 ether; // Hardcoded goal
        deadline = block.timestamp + 7 days; // Hardcoded 7-day campaign
    }

    function contribute() external payable {
        require(block.timestamp < deadline, "Campaign has ended");
        require(msg.value > 0, "Contribution must be more than 0");
        contributions[msg.sender] += msg.value;
        totalRaised += msg.value;
    }

    function withdrawFunds() external {
        require(msg.sender == owner, "Only owner can withdraw");
        require(block.timestamp >= deadline, "Campaign not yet ended");
        require(totalRaised >= goalAmount, "Goal not reached");
        payable(owner).transfer(address(this).balance);
    }

    function getDetails() external view returns (
        address, uint, uint, uint, uint
    ) {
        return (
            owner,
            goalAmount,
            deadline,
            totalRaised,
            address(this).balance
        );
    }
}
